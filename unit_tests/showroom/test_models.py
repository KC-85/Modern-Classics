from django.test import TestCase
from django.db import IntegrityError
from django.urls import reverse

from apps.showroom.models import CarMake, CarModel, Car


class CarModelTests(TestCase):
    @classmethod
    def setUpTestData(cls):
        cls.ford = CarMake.objects.create(name="Ford")
        cls.vw = CarMake.objects.create(name="Volkswagen")
        cls.focus = CarModel.objects.create(make=cls.ford, name="Focus")
        cls.golf = CarModel.objects.create(make=cls.vw, name="Golf")

    def test_make_str(self):
        self.assertEqual(str(self.ford), "Ford")

    def test_model_str(self):
        self.assertEqual(str(self.focus), "Ford Focus")

    def test_model_unique_together(self):
        with self.assertRaises(IntegrityError):
            CarModel.objects.create(make=self.ford, name="Focus")


class CarTests(TestCase):
    @classmethod
    def setUpTestData(cls):
        cls.ford = CarMake.objects.create(name="Ford")
        cls.vw = CarMake.objects.create(name="Volkswagen")
        cls.focus = CarModel.objects.create(make=cls.ford, name="Focus")
        cls.golf = CarModel.objects.create(make=cls.vw, name="Golf")

        # create a few cars with varied years/prices/conditions
        cls.car1 = Car.objects.create(
            make=cls.ford, model=cls.focus, year=2020,
            specifications="Spec A", performance="0-60 in 6.0s",
            condition="good", price="10000.00"
        )
        cls.car2 = Car.objects.create(
            make=cls.vw, model=cls.golf, year=2022,
            specifications="Spec B", performance="0-60 in 7.0s",
            condition="excellent", price="15000.00"
        )

    def test_slug_autogenerated_once(self):
        self.assertTrue(self.car1.slug)
        original = self.car1.slug
        # saving again should not change the slug
        self.car1.specifications = "Updated"
        self.car1.save()
        self.assertEqual(self.car1.slug, original)
        # slug shape
        expected_prefix = f"{self.car1.make.name}-{self.car1.model.name}-{self.car1.year}".lower(
        ).replace(" ", "-")
        self.assertTrue(self.car1.slug.startswith(expected_prefix[:150]))

    def test_get_absolute_url(self):
        url = self.car1.get_absolute_url()
        self.assertEqual(url, reverse("showroom:car_detail",
                         kwargs={"slug": self.car1.slug}))

    def test_car_str(self):
        text = str(self.car1)
        self.assertIn("Ford Focus (2020)", text)
        self.assertIn("Â£10000.00", text)
        # sold flag shows (SOLD)
        self.car1.is_sold = True
        self.car1.save()
        self.assertIn("(SOLD)", str(self.car1))

    def test_default_ordering(self):
        # meta ordering: ("-year", "make__name", "model__name")
        cars = list(Car.objects.all())
        self.assertEqual(cars[0], self.car2)  # 2022 comes before 2020
